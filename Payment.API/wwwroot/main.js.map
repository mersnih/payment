{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/model/billing.ts","webpack:///./src/app/payment/payment.component.css","webpack:///./src/app/payment/payment.component.html","webpack:///./src/app/payment/payment.component.ts","webpack:///./src/app/services/date.service.ts","webpack:///./src/app/services/hash.service.ts","webpack:///./src/app/services/payment.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"@media (max-width: 767px) {\\r\\n    /* On small screens, the nav menu spans the full width of the screen. Leave a space for it. */\\r\\n    .body-content {\\r\\n      padding-top: 50px;\\r\\n    }\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSw2RkFBNkY7SUFDN0Y7TUFDRSxpQkFBaUI7SUFDbkI7RUFDRiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XHJcbiAgICAvKiBPbiBzbWFsbCBzY3JlZW5zLCB0aGUgbmF2IG1lbnUgc3BhbnMgdGhlIGZ1bGwgd2lkdGggb2YgdGhlIHNjcmVlbi4gTGVhdmUgYSBzcGFjZSBmb3IgaXQuICovXHJcbiAgICAuYm9keS1jb250ZW50IHtcclxuICAgICAgcGFkZGluZy10b3A6IDUwcHg7XHJcbiAgICB9XHJcbiAgfSJdfQ== */\"","module.exports = \"<body>\\n  <div class=\\\"container\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</body>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Payment-SPA';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { PaymentComponent } from './payment/payment.component';\nimport { PaymentService } from './services/payment.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PaymentComponent\n  ],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\n    HttpClientModule,\n    FormsModule,\n    RouterModule.forRoot([\n      { path: '', component: PaymentComponent, pathMatch: 'full' },\n  ])\n],\n  providers: [PaymentService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\r\nexport class Billing{\r\n\r\n    public txntype : string; // ‘sale’, ‘preauth’, ‘postauth’ or ‘void’\r\n    public timezone : string;\r\n    public txndatetime : string;\r\n    public hash_algorithm : string;\r\n    public hash : string;\r\n    public storename : number; // Store id\r\n    public mode : string; //‘fullpay’, ‘payonly’ or ‘payplus’\r\n    public chargetotal : number;\r\n    public currency : number; // numeric ISO value\r\n    public responseFailURL : string;\r\n    public responseSuccessURL : string;\r\n\r\n    constructor()\r\n    {\r\n        this.txntype = \"\";\r\n        this.timezone = \"\";\r\n        this.txndatetime = \"\";\r\n        this.hash_algorithm = \"\";\r\n        this.hash = \"\"; \r\n        this.storename = 0;\r\n        this.mode = \"\";\r\n        this.chargetotal = 25.0;\r\n        this.currency = 978;\r\n        this.responseFailURL = \"\";\r\n        this.responseSuccessURL = \"\";\r\n    }\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BheW1lbnQvcGF5bWVudC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<html>\\n<head><title>IPG Connect Sample for ASP</title></head>\\n<body>\\n<h1>Order Form</h1>\\n<form  (ngSubmit)=\\\"onSubmit()\\\">\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"chargetotalId\\\">Charge totale</label>\\n        <input class=\\\"form-control\\\" name=\\\"chargetotal\\\" id=\\\"chargetotalId\\\" [(ngModel)]=\\\"billingModel.chargetotal\\\" />\\n    </div>\\n    <div class=\\\"form-group\\\" hidden>\\n        <label for=\\\"currencyId\\\">Devise</label>\\n        <input class=\\\"form-control\\\" name=\\\"currency\\\" id=\\\"currencyId\\\" [(ngModel)]=\\\"billingModel.currency\\\" />\\n    </div>\\n\\n<input type=\\\"submit\\\" value=\\\"Valider\\\">\\n</form>\\n</body>\\n</html>\\n\\n{{billingModel | json}}\\n\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { Billing } from '../model/billing';\nimport { PaymentService } from '../services/payment.service';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http'\nimport { DateService } from '../services/date.service';\nimport { HashService } from '../services/hash.service';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})\nexport class PaymentComponent implements OnInit {\n\n  public _http: HttpClient;\n  public _baseUrl : string;\n  billingModel = new Billing();\n\n  constructor(private _paymentService : PaymentService,\n              private _hashService : HashService,\n              http : HttpClient, \n              @Inject('BASE_URL') baseUrl : string,\n              private _dateFormatPipe : DateService) {\n                this._http = http;\n                this._baseUrl = baseUrl;\n               }\n\n  ngOnInit() {\n    this.billingModel = new Billing();\n\n    this.billingModel.hash = \"\"; \n    this.billingModel.txntype = \"sale\";\n    this.billingModel.txndatetime = \"\";\n    this.billingModel.timezone = \"Europe/London\";\n    this.billingModel.hash_algorithm = \"SHA256\";\n    this.billingModel.storename = 5544331199;\n    this.billingModel.mode = \"fullpay\";\n    this.billingModel.chargetotal = 25.50;\n    this.billingModel.currency = 978;\n    this.billingModel.responseSuccessURL = this._baseUrl + \"api/Response\";\n    this.billingModel.responseFailURL = this._baseUrl + \"api/Response\";\n  }\n  onSubmit(){\n\n     this.billingModel.txndatetime = this._dateFormatPipe.transform(new Date());\n\n     this._hashService.encrypt(this.billingModel, this._baseUrl).subscribe(data => {\n      this.billingModel.hash = data;\n      console.log(data);\n    })\n\n    this._paymentService.pay(this.billingModel).subscribe(result => {\n      console.log(result);\n    }, error => console.error(error));\n  \n  };\n}\n","import { Injectable, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateService extends DatePipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    ///MMM/dd/yyyy \n    return super.transform(value, \"yyyy:MM:dd-hh:mm:ss\");\n }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\nimport { Billing } from '../model/billing';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HashService {\n\n  constructor(private _http : HttpClient) { }\n\n  encrypt(billing : Billing, _baseUrl : string) : Observable<string>{\n\n    const params = new HttpParams()\n    .append(\"txndatetime\", billing.txndatetime)\n    .append(\"storename\", billing.storename.toString())\n    .append(\"chargetotal\", billing.chargetotal.toString())\n    .append(\"currency\", billing.currency.toString());\n  \n    const headers = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});\n\n    return this._http.post<string>(_baseUrl + \"api/payment\", null,{headers, params});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Billing } from '../model/billing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n  _url = 'https://test.ipg-online.com/connect/gateway/processing';\n\n  constructor(private _http : HttpClient) { }\n\n  pay(billing : Billing) : Observable<Billing>{\n    \n    const params = new HttpParams()\n              .append(\"txtntype\", billing.txntype)\n              .append(\"timezone\", billing.timezone)\n              .append(\"txndatetime\", billing.txndatetime)\n              .append(\"hash\", billing.hash)\n              .append(\"storename\", billing.storename.toString())\n              .append(\"mode\", billing.mode)\n              .append(\"chargetotal\", billing.chargetotal.toString())\n              .append(\"currency\", billing.currency.toString())\n              .append(\"responseSuccessURL\", billing.responseSuccessURL)\n              .append(\"responseFailURL\", billing.responseFailURL);\n\n    const headers = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});\n    const body = JSON.stringify(billing);\n  \n\n    return this._http.post<Billing>(this._url, body, {headers, params});\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nexport function getBaseUrl() {\n  return document.getElementsByTagName('base')[0].href;\n}\n\nconst providers = [\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\n];\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}